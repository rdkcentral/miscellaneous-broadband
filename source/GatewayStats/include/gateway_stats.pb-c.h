/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gateway_stats.proto */

#ifndef PROTOBUF_C_gateway_5fstats_2eproto__INCLUDED
#define PROTOBUF_C_gateway_5fstats_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct SystemStats SystemStats;
typedef struct WanStats WanStats;
typedef struct LanStats LanStats;
typedef struct IPv6MonitoringStats IPv6MonitoringStats;
typedef struct TcpStats TcpStats;
typedef struct RestartCountStats RestartCountStats;
typedef struct ClientDetails ClientDetails;
typedef struct ClientStats ClientStats;
typedef struct PidDetails PidDetails;
typedef struct PidStats PidStats;
typedef struct Report Report;


/* --- enums --- */


/* --- messages --- */

/*
 * ===== System Stats =====
 */
struct  SystemStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  char *model;
  char *firmware;
  char *cmac;
  char *uptime;
  double cpu_usage;
  double free_memory;
  double slab_memory;
  double avail_memory;
  double cached_mem;
  double slab_unreclaim;
  double loadavg_1min;
  double loadavg_5min;
  double loadavg_15min;
  uint32_t rootfs_used_kb;
  uint32_t rootfs_total_kb;
  uint32_t tmpfs_used_kb;
  uint32_t tmpfs_total_kb;
};
#define SYSTEM_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&system_stats__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * ===== WAN Stats =====
 */
struct  WanStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  char *interface_status;
  char *ipv4_address;
  char *ipv6_address;
  char *gateway_status;
  double packet_loss;
  double latency;
  double jitter;
  double dns_time;
  char *rx_bytes;
  char *tx_bytes;
  char *rx_dropped;
  char *tx_dropped;
  char *ipv4_lease;
  char *ipv6_lease;
};
#define WAN_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wan_stats__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ===== LAN Stats =====
 */
struct  LanStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  char *ipv4_address;
  char *ipv6_address;
  char *rx_bytes;
  char *tx_bytes;
  char *rx_dropped;
  char *tx_dropped;
};
#define LAN_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lan_stats__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ===== IPv6 Monitoring Stats =====
 */
struct  IPv6MonitoringStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  char *global_ipv6_address;
  char *link_local_ipv6_address;
  char *ipv6_reachability;
  double ipv4_latency;
  double ipv6_latency;
  double ipv4_packet_loss;
  double ipv6_packet_loss;
};
#define IPV6_MONITORING_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipv6_monitoring_stats__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


/*
 * ===== TCP Stats =====
 */
struct  TcpStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  char *tcplostretransmit;
  char *tcpretransfail;
  char *tcpsackfailures;
  char *tcptimeouts;
  char *tcpabortontimeout;
  char *listenoverflows;
  char *tcporigdatasent;
};
#define TCP_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tcp_stats__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ===== Restart Count Stats =====
 */
struct  RestartCountStats
{
  ProtobufCMessage base;
  int32_t fw_restart_count;
  size_t n_fw_restart_time;
  char **fw_restart_time;
  int32_t wan_restart_count;
  size_t n_wan_restart_time;
  char **wan_restart_time;
};
#define RESTART_COUNT_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&restart_count_stats__descriptor) \
, 0, 0,NULL, 0, 0,NULL }


/*
 * ===== Client Details =====
 */
struct  ClientDetails
{
  ProtobufCMessage base;
  char *mac_address;
  char *ip_addr;
  char *host_name;
  char *status;
  char *tx_bytes;
  char *rx_bytes;
  int32_t tcp_est_counts;
  uint32_t ipv4_synack_min_latency;
  uint32_t ipv4_synack_max_latency;
  uint32_t ipv4_synack_avg_latency;
  uint32_t ipv4_ack_min_latency;
  uint32_t ipv4_ack_max_latency;
  uint32_t ipv4_ack_avg_latency;
  uint32_t ipv6_synack_min_latency;
  uint32_t ipv6_synack_max_latency;
  uint32_t ipv6_synack_avg_latency;
  uint32_t ipv6_ack_min_latency;
  uint32_t ipv6_ack_max_latency;
  uint32_t ipv6_ack_avg_latency;
};
#define CLIENT_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_details__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * ===== Client Stats =====
 */
struct  ClientStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  int32_t client_count;
  size_t n_client_details;
  ClientDetails **client_details;
};
#define CLIENT_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_stats__descriptor) \
, 0, 0, 0,NULL }


/*
 * ===== PID Details =====
 */
struct  PidDetails
{
  ProtobufCMessage base;
  uint32_t pid;
  char *pname;
  uint32_t rss;
  uint32_t pss;
  uint32_t mem_util;
  uint32_t cpu_util;
};
#define PID_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pid_details__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


/*
 * ===== PID Stats =====
 */
struct  PidStats
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  int32_t count;
  size_t n_pid_details;
  PidDetails **pid_details;
};
#define PID_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pid_stats__descriptor) \
, 0, 0, 0,NULL }


/*
 * //////////////////////////////////////////////////////////////////////////////
 * Overall report that contain all individual stats reports
 * //////////////////////////////////////////////////////////////////////////////
 */
struct  Report
{
  ProtobufCMessage base;
  uint64_t timestamp_ms;
  size_t n_system;
  SystemStats **system;
  size_t n_wan;
  WanStats **wan;
  size_t n_lan;
  LanStats **lan;
  size_t n_ipv6_monitoring;
  IPv6MonitoringStats **ipv6_monitoring;
  size_t n_tcp;
  TcpStats **tcp;
  size_t n_client;
  ClientStats **client;
  size_t n_pid;
  PidStats **pid;
  RestartCountStats *restartcount;
};
#define REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report__descriptor) \
, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL }


/* SystemStats methods */
void   system_stats__init
                     (SystemStats         *message);
size_t system_stats__get_packed_size
                     (const SystemStats   *message);
size_t system_stats__pack
                     (const SystemStats   *message,
                      uint8_t             *out);
size_t system_stats__pack_to_buffer
                     (const SystemStats   *message,
                      ProtobufCBuffer     *buffer);
SystemStats *
       system_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   system_stats__free_unpacked
                     (SystemStats *message,
                      ProtobufCAllocator *allocator);
/* WanStats methods */
void   wan_stats__init
                     (WanStats         *message);
size_t wan_stats__get_packed_size
                     (const WanStats   *message);
size_t wan_stats__pack
                     (const WanStats   *message,
                      uint8_t             *out);
size_t wan_stats__pack_to_buffer
                     (const WanStats   *message,
                      ProtobufCBuffer     *buffer);
WanStats *
       wan_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wan_stats__free_unpacked
                     (WanStats *message,
                      ProtobufCAllocator *allocator);
/* LanStats methods */
void   lan_stats__init
                     (LanStats         *message);
size_t lan_stats__get_packed_size
                     (const LanStats   *message);
size_t lan_stats__pack
                     (const LanStats   *message,
                      uint8_t             *out);
size_t lan_stats__pack_to_buffer
                     (const LanStats   *message,
                      ProtobufCBuffer     *buffer);
LanStats *
       lan_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lan_stats__free_unpacked
                     (LanStats *message,
                      ProtobufCAllocator *allocator);
/* IPv6MonitoringStats methods */
void   ipv6_monitoring_stats__init
                     (IPv6MonitoringStats         *message);
size_t ipv6_monitoring_stats__get_packed_size
                     (const IPv6MonitoringStats   *message);
size_t ipv6_monitoring_stats__pack
                     (const IPv6MonitoringStats   *message,
                      uint8_t             *out);
size_t ipv6_monitoring_stats__pack_to_buffer
                     (const IPv6MonitoringStats   *message,
                      ProtobufCBuffer     *buffer);
IPv6MonitoringStats *
       ipv6_monitoring_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipv6_monitoring_stats__free_unpacked
                     (IPv6MonitoringStats *message,
                      ProtobufCAllocator *allocator);
/* TcpStats methods */
void   tcp_stats__init
                     (TcpStats         *message);
size_t tcp_stats__get_packed_size
                     (const TcpStats   *message);
size_t tcp_stats__pack
                     (const TcpStats   *message,
                      uint8_t             *out);
size_t tcp_stats__pack_to_buffer
                     (const TcpStats   *message,
                      ProtobufCBuffer     *buffer);
TcpStats *
       tcp_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tcp_stats__free_unpacked
                     (TcpStats *message,
                      ProtobufCAllocator *allocator);
/* RestartCountStats methods */
void   restart_count_stats__init
                     (RestartCountStats         *message);
size_t restart_count_stats__get_packed_size
                     (const RestartCountStats   *message);
size_t restart_count_stats__pack
                     (const RestartCountStats   *message,
                      uint8_t             *out);
size_t restart_count_stats__pack_to_buffer
                     (const RestartCountStats   *message,
                      ProtobufCBuffer     *buffer);
RestartCountStats *
       restart_count_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   restart_count_stats__free_unpacked
                     (RestartCountStats *message,
                      ProtobufCAllocator *allocator);
/* ClientDetails methods */
void   client_details__init
                     (ClientDetails         *message);
size_t client_details__get_packed_size
                     (const ClientDetails   *message);
size_t client_details__pack
                     (const ClientDetails   *message,
                      uint8_t             *out);
size_t client_details__pack_to_buffer
                     (const ClientDetails   *message,
                      ProtobufCBuffer     *buffer);
ClientDetails *
       client_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_details__free_unpacked
                     (ClientDetails *message,
                      ProtobufCAllocator *allocator);
/* ClientStats methods */
void   client_stats__init
                     (ClientStats         *message);
size_t client_stats__get_packed_size
                     (const ClientStats   *message);
size_t client_stats__pack
                     (const ClientStats   *message,
                      uint8_t             *out);
size_t client_stats__pack_to_buffer
                     (const ClientStats   *message,
                      ProtobufCBuffer     *buffer);
ClientStats *
       client_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_stats__free_unpacked
                     (ClientStats *message,
                      ProtobufCAllocator *allocator);
/* PidDetails methods */
void   pid_details__init
                     (PidDetails         *message);
size_t pid_details__get_packed_size
                     (const PidDetails   *message);
size_t pid_details__pack
                     (const PidDetails   *message,
                      uint8_t             *out);
size_t pid_details__pack_to_buffer
                     (const PidDetails   *message,
                      ProtobufCBuffer     *buffer);
PidDetails *
       pid_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pid_details__free_unpacked
                     (PidDetails *message,
                      ProtobufCAllocator *allocator);
/* PidStats methods */
void   pid_stats__init
                     (PidStats         *message);
size_t pid_stats__get_packed_size
                     (const PidStats   *message);
size_t pid_stats__pack
                     (const PidStats   *message,
                      uint8_t             *out);
size_t pid_stats__pack_to_buffer
                     (const PidStats   *message,
                      ProtobufCBuffer     *buffer);
PidStats *
       pid_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pid_stats__free_unpacked
                     (PidStats *message,
                      ProtobufCAllocator *allocator);
/* Report methods */
void   report__init
                     (Report         *message);
size_t report__get_packed_size
                     (const Report   *message);
size_t report__pack
                     (const Report   *message,
                      uint8_t             *out);
size_t report__pack_to_buffer
                     (const Report   *message,
                      ProtobufCBuffer     *buffer);
Report *
       report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report__free_unpacked
                     (Report *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SystemStats_Closure)
                 (const SystemStats *message,
                  void *closure_data);
typedef void (*WanStats_Closure)
                 (const WanStats *message,
                  void *closure_data);
typedef void (*LanStats_Closure)
                 (const LanStats *message,
                  void *closure_data);
typedef void (*IPv6MonitoringStats_Closure)
                 (const IPv6MonitoringStats *message,
                  void *closure_data);
typedef void (*TcpStats_Closure)
                 (const TcpStats *message,
                  void *closure_data);
typedef void (*RestartCountStats_Closure)
                 (const RestartCountStats *message,
                  void *closure_data);
typedef void (*ClientDetails_Closure)
                 (const ClientDetails *message,
                  void *closure_data);
typedef void (*ClientStats_Closure)
                 (const ClientStats *message,
                  void *closure_data);
typedef void (*PidDetails_Closure)
                 (const PidDetails *message,
                  void *closure_data);
typedef void (*PidStats_Closure)
                 (const PidStats *message,
                  void *closure_data);
typedef void (*Report_Closure)
                 (const Report *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor system_stats__descriptor;
extern const ProtobufCMessageDescriptor wan_stats__descriptor;
extern const ProtobufCMessageDescriptor lan_stats__descriptor;
extern const ProtobufCMessageDescriptor ipv6_monitoring_stats__descriptor;
extern const ProtobufCMessageDescriptor tcp_stats__descriptor;
extern const ProtobufCMessageDescriptor restart_count_stats__descriptor;
extern const ProtobufCMessageDescriptor client_details__descriptor;
extern const ProtobufCMessageDescriptor client_stats__descriptor;
extern const ProtobufCMessageDescriptor pid_details__descriptor;
extern const ProtobufCMessageDescriptor pid_stats__descriptor;
extern const ProtobufCMessageDescriptor report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gateway_5fstats_2eproto__INCLUDED */
